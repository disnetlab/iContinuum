##installation of Network Emulator (Mininet), and all the dependencies

---
- hosts: mininet_machine
  become: yes
  become_method: sudo
  become_user: root
  tasks:
    - name: Get home directory of the user
      shell: "getent passwd {{ ansible_user }} | cut -d: -f6"
      register: user_home

    - name: Print home directory
      debug:
        var: user_home.stdout

    - name: Install required packages
      apt:
        name: "{{ item }}"
        state: present
      loop:
        - gcc
        - perl
        - make
        - terminator
        - openjdk-11-jdk
        - git
        - git-review
        - zip
        - curl
        - unzip
        - bzip2
        - python-dev
        - python-setuptools
        - python3-pip
        - xterm
        - default-jdk
        - git
        - python3
        - docker.io
        - docker-compose
        - snapd


    - name: Add Java environment variables
      lineinfile:
        dest: /etc/environment
        line: |
          JAVA_HOME=/usr/lib/jvm/java-11-openjdk-amd64
          JRE_HOME=/usr/lib/jvm/java-11-openjdk-amd64/jre


    - name: Install Python
      apt:
        name: python
        state: present


    - name: Download get-pip.py
      get_url:
        url: https://bootstrap.pypa.io/pip/2.7/get-pip.py
        dest: /tmp/get-pip.py
      when: ansible_distribution_major_version|int == 16


    - name: Install pip for Python 2
      command: python2 /tmp/get-pip.py
      when: ansible_distribution_major_version|int == 16


    - name: Update Package Manager
      command: sudo apt update



    - name: Install python3-pip
      apt:
        name: python3-pip
        state: present


    - name: Upgrade pip for Python 3
      pip:
        name: pip
        state: latest
        executable: pip3
    - name: Install Selenium
      pip:
        name: selenium
        state: present


    - name: Clone Mininet
      command: git clone https://github.com/mininet/mininet /home/ubuntu/mininet


    - name: Install Mininet
      become: yes
      apt:
        name: mininet
        state: present



    - name: Download sFlow-RT tarball
      get_url:
        url: http://www.inmon.com/products/sFlow-RT/sflow-rt.tar.gz
        dest: "{{ user_home.stdout }}/sflow-rt.tar.gz"
      


    - name: Create sFlow-RT directory
      become: yes
      file:
        path: "{{ user_home.stdout }}/sflow-rt"
        state: directory
      



    - name: Extract sFlow-RT tarball
      become: yes
      unarchive:
        src: "{{ user_home.stdout }}/sflow-rt.tar.gz"
        dest: "{{ user_home.stdout }}/sflow-rt"
        remote_src: yes
        extra_opts: "--strip-components=1"
          
     

    - name: Install Java
      apt:
        name: openjdk-11-jre-headless
        state: present

    - name: Debug - Before starting sFlow-RT
      debug:
        msg: "About to start sFlow-RT script"

    - name: Start sFlow-RT in the background
      shell: "nohup {{ user_home.stdout }}/sflow-rt/start.sh > /dev/null 2>&1 &"
      

    - name: Debug - After starting sFlow-RT
      debug:
        msg: "sFlow-RT script started successfully"


    - name: Retrieve IP address of sflow_machine
      set_fact:
        sflow_ip: "{{ groups['sflow_machine'][0] }}"

    - name: Debug - Print sflow_machine IP address
      debug:
        var: sflow_ip


    - name: Create example.py file
      ansible.builtin.template:
        src: example.py.j2
        dest: "{{ user_home.stdout }}/example.py"
      vars:
        user_home: "{{ lookup('env', 'HOME') }}"


    - name: Debug - Print inventory file
      debug:
        msg: "{{ lookup('file', 'inventory.ini') }}"
    
    - name: Retrieve IP address of onos_machine
      set_fact:
        onos_ip: "{{ groups['onos_machine'][0] }}"

    - name: Debug - Print onos_machine IP address
      debug:
        var: onos_ip




    - name: Print command to be executed
      debug:
        msg: "Command to be executed: sudo mn --custom example.py,sflow-rt/extras/sflow.py --topo mytopo --mac --switch=ovs,protocols=OpenFlow13 '--controller=remote,ip={{ onos_ip }}' &"


    - name: Update package repositories
      apt:
        update_cache: yes

    - name: Install tmux
      apt:
        name: tmux
        state: present

   
    
    - name: Create topology.sh file and save it on mininet machine
      ansible.builtin.template:
        src: topology.sh.j2
        dest: "{{ user_home.stdout }}/topology.sh"
      vars:
        user_home: "{{ lookup('env', 'HOME') }}"

    - name: Configure permission to the topology file
      shell: chmod +x topology.sh


    - name: Start topology in the background
      shell: "nohup {{ user_home.stdout }}/topology.sh > /dev/null 2>&1 &"


