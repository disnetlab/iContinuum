##Installation of Cluster Manager (Kubernetes/k3s) with one master node and two worker nodes as well as  docker, and all the dependencies
---
- name: Install and configure K3s cluster
  hosts: master,workers
  become: true
  tasks:
    - name: Update package lists
      apt:
        update_cache: yes

    - name: Get home directory of the user
      shell: "getent passwd {{ ansible_user }} | cut -d: -f6"
      register: user_home

    - name: Print home directory
      debug:
        var: user_home.stdout


    - name: Install required packages
      apt:
        name: "{{ item }}"
        state: present
      loop:
        - terminator
        - openjdk-11-jdk
        - zip
        - curl
        - unzip
        - bzip2
        - python2-dev
        - python-setuptools
        - python3-dev
        - python3-setuptools
        - python3-pip
        - default-jdk
        - python3
       

    - name: Ping all hosts
      ping:

    - name: Update /etc/hosts file
      lineinfile:
        path: /etc/hosts
        line: "{{ hostvars[item]['ansible_host'] }} {{ item }}"
        state: present
      with_items: "{{ groups['kubernetes'] }}"
      become: true



    - name: Update apt packages
      apt:
        update_cache: yes
      become: true

    - name: Upgrade system packages
      apt:
        upgrade: yes
        autoremove: yes
        autoclean: yes
      become: true

    - name: Install Docker dependencies
      apt:
        name: "{{ item }}"
        state: present
      loop:
        - apt-transport-https
        - ca-certificates
        - curl
        - gnupg
        - software-properties-common
        - lsb-release

    - name: Create directory for Docker keyring
      file:
        path: /etc/apt/keyrings
        state: directory
        mode: '0755'

    - name: Download Docker GPG key
      get_url:
        url: https://download.docker.com/linux/ubuntu/gpg
        dest: /etc/apt/keyrings/docker.gpg
        mode: '0644'



    - name: Debug before adding GPG key
      debug:
        msg: "Before adding GPG key"


    - name: Add Docker GPG key to apt keyring
      shell: curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -


    - name: Debug after adding GPG key
      debug:
        msg: "After adding GPG key"


    - name: Add Docker repository
      lineinfile:
        path: /etc/apt/sources.list.d/docker.list
        line: "deb https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
        create: yes

    - name: Update package lists again
      apt:
        update_cache: yes

    - name: Install Docker packages
      apt:
        name: "{{ item }}"
        state: present
      loop:
        - docker-ce
        - docker-ce-cli
        - containerd.io



    - name: Add Java environment variables
      lineinfile:
        dest: /etc/environment
        line: |
          JAVA_HOME=/usr/lib/jvm/java-11-openjdk-amd64
          JRE_HOME=/usr/lib/jvm/java-11-openjdk-amd64/jre


    - name: Gather package facts
      package_facts:
        manager: apt


    - name: Install Python
      apt:
        name: "{{ 'python' if 'python' in ansible_facts.packages else 'python-is-python3' }}"
        state: present


    - name: Download get-pip.py
      get_url:
        url: https://bootstrap.pypa.io/pip/2.7/get-pip.py
        dest: /tmp/get-pip.py
      when: ansible_distribution_major_version|int == 16


    - name: Install pip for Python 2
      command: python2 /tmp/get-pip.py
      when: ansible_distribution_major_version|int == 16


    - name: Update Package Manager
      command: sudo apt update



    - name: Install python3-pip
      apt:
        name: python3-pip
        state: present


    - name: Upgrade pip for Python 3
      pip:
        name: pip
        state: latest
        executable: pip3
    

    - name: Ensure Docker service is running
      service:
        name: docker
        state: started




    - name: Add current user to the docker group
      user:
        name: "{{ ansible_user }}"
        groups: docker
        append: yes
      become: true

    - name: Allow incoming traffic to port 6443
      ufw:
        rule: allow
        port: 6443
        proto: tcp
      become: true

    - name: Allow incoming traffic to port 443
      ufw:
        rule: allow
        port: 443
        proto: tcp
      become: true


    - name: Install openvswitch-switch package
      become: yes
      apt:
        name: openvswitch-switch
        state: present


    - name: Delete OVS bridge br1 if it exists
      become: yes
      shell: ovs-vsctl del-br br1
      ignore_errors: true

    - name: Create OVS bridge br1
      become: yes
      shell: ovs-vsctl add-br br1

    - name: Set OpenFlow protocol version to 1.3 on bridge br1
      become: yes
      shell: ovs-vsctl set bridge br1 protocols=OpenFlow13

    - name: Add port tap0 to bridge br1
      become: yes
      shell: ovs-vsctl add-port br1 tap0 -- set Interface tap0 type=internal
      

    - name: Bring up tap0 interface
      become: yes
      shell: ip link set tap0 up



    - name: Retrieve IP address of sflow_machine
      set_fact:
        sflow_ip: "{{ groups['sflow_machine'][0] }}"

    - name: Debug - Print sflow_machine IP address
      debug:
        var: sflow_ip



    - name: Create sFlow agent on the OVS bridges on all the nodes in the Kubernetes Cluster
      become: yes
      shell: ovs-vsctl -- --id=@sflow create sflow agent=tap0 target="{{sflow_ip}}\:6343" header=128 sampling=64 polling=10 -- set bridge br1 sflow=@sflow


    - name: Retrieve IP address of onos_machine
      set_fact:
        mininet_ip: "{{ groups['mininet_machine'][0] }}"

    - name: Debug - Print mininet_machine IP address
      debug:
        var: mininet_ip


    - name: Add port tap1 to bridge br1 with GRE tunnel to ONOS
      become: yes
      command: ovs-vsctl add-port br1 tap1 -- set Interface tap1 type=gre options:remote_ip={{ mininet_ip }}




- name: Install K3s on master node
  hosts: master
  tasks:
    - name: Retrieve IP address of tap0 in master node
      set_fact:
        tap0_ip: "{{ groups['master_tap0'][0] }}"

    - name: Debug - Print tap0 IP address including the subnet mask in master node
      debug:
        var: tap0_ip

    - name: Set IP address on tap0 interface
      become: yes
      command: ip addr add {{tap0_ip}} dev tap0

    - name: Split tap0 ip address from the subnet mask to extract IP address
      set_fact:
        tap0_ip_address: "{{ tap0_ip.split('/')[0] }}"

    - name: Debug - Print tap0 IP address in master node
      debug:
        var: tap0_ip_address




    - name: Executing the command
      shell: curl -sfL https://get.k3s.io | INSTALL_K3S_EXEC="--node-ip={{tap0_ip_address}} --flannel-iface=tap0" sh -

    - name: Retrieve K3s node token
      command: "sudo cat /var/lib/rancher/k3s/server/node-token"
      register: token_output
      become: true

    - name: Set token as a fact
      set_fact:
        k3s_token: "{{ token_output.stdout }}"

    - name: Print token
      debug:
        var: k3s_token


- name: Install K3s on worker1
  hosts: worker1
  tasks:
    - name: Retrieve IP address of tap0 in worker1 node
      set_fact:
        tap0_ip: "{{ groups['worker1_tap0'][0] }}"

    - name: Debug - Print tap0 IP address including the subnet mask in worker1
      debug:
        var: tap0_ip

    - name: Set IP address on tap0 interface
      become: yes
      command: ip addr add {{tap0_ip}} dev tap0

    - name: Split tap0 ip address from the subnet mask to extract IP address
      set_fact:
        tap0_ip_address: "{{ tap0_ip.split('/')[0] }}"

    - name: Debug - Print tap0 IP address in worker1
      debug:
        var: tap0_ip_address


    - name: Retrieve IP address of master node
      set_fact:
        master_ip: "{{ hostvars['master']['ansible_host'] }}"

    - name: Debug - Print master node IP address
      debug:
        var: master_ip

    - name: Join worker1 to the cluster
      shell: curl -sfL https://get.k3s.io | K3S_URL=https://{{master_ip}}:6443 K3S_TOKEN={{ hostvars['master']['k3s_token'] }} INSTALL_K3S_EXEC="--node-ip={{tap0_ip_address}} --flannel-iface=tap0" sh -



- name: Configure all Kubernetes nodes to send data to sFlow-RT collector
  hosts: master
  tasks:
    - name: Create host-sflow.yml file
      ansible.builtin.template:
        src: "{{ playbook_dir }}/../host-sflow.yml.j2"
        dest: "{{ user_home.stdout }}/host-sflow.yml"
      vars:
        user_home: "{{ lookup('env', 'HOME') }}"

    - name: Deploy host-sflow.yml file
      shell: kubectl apply -f host-sflow.yml
      become: yes



    - name: Create deployment.yml file
      ansible.builtin.template:
        src: deployment.yml.j2
        dest: "{{ user_home.stdout }}/deployment.yml"
      vars:
        user_home: "{{ lookup('env', 'HOME') }}"

    - name: Deploy deployment.yml file
      shell: kubectl apply -f  deployment.yml
      become: yes



    - name: Retrieve IP address of tap0 in worker1 node
      set_fact:
        tap0_ip_worker1: "{{ groups['worker1_tap0'][0] }}"


    - name: Split tap0 ip address from the subnet mask to extract IP address
      set_fact:
        tap0_ip_address_worker1: "{{ tap0_ip_worker1.split('/')[0] }}"

    - name: Execute ping command
      shell: ping -c 2 {{tap0_ip_address_worker1}}


