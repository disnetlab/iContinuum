##Installation of  Network Controller (ONOS), docker, portainer, and all the dependencies

---
- hosts: onos_machine
  become: yes
  become_method: sudo
  become_user: root
  tasks:
    - name: Update package lists
      apt:
        update_cache: yes

    - name: Get home directory of the user
      shell: "getent passwd {{ ansible_user }} | cut -d: -f6"
      register: user_home

    - name: Print home directory
      debug:
        var: user_home.stdout



    - name: Install required packages
      apt:
        name: "{{ item }}"
        state: present
      loop:
        - gcc
        - perl
        - make
        - terminator
        - openjdk-11-jdk
        - git
        - git-review
        - zip
        - curl
        - unzip
        - bzip2
        - python2-dev
        - python-setuptools
        - python3-dev
        - python3-setuptools
        - python3-pip
        - xterm
        - default-jdk
        - python3
        - snapd

    - name: Install Docker dependencies
      apt:
        name: "{{ item }}"
        state: present
      loop:
        - apt-transport-https
        - ca-certificates
        - curl
        - gnupg
        - software-properties-common
        - lsb-release

    - name: Create directory for Docker keyring
      file:
        path: /etc/apt/keyrings
        state: directory
        mode: '0755'

    - name: Download Docker GPG key
      get_url:
        url: https://download.docker.com/linux/ubuntu/gpg
        dest: /etc/apt/keyrings/docker.gpg
        mode: '0644'



    - name: Debug before adding GPG key
      debug:
        msg: "Before adding GPG key"


    - name: Add Docker GPG key to apt keyring
      shell: curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -


    - name: Debug after adding GPG key
      debug:
        msg: "After adding GPG key"


    - name: Add Docker repository
      lineinfile:
        path: /etc/apt/sources.list.d/docker.list
        line: "deb https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
        create: yes

    - name: Update package lists again
      apt:
        update_cache: yes

    - name: Install Docker packages
      apt:
        name: "{{ item }}"
        state: present
      loop:
        - docker-ce
        - docker-ce-cli
        - containerd.io





    - name: Add Java environment variables
      lineinfile:
        dest: /etc/environment
        line: |
          JAVA_HOME=/usr/lib/jvm/java-11-openjdk-amd64
          JRE_HOME=/usr/lib/jvm/java-11-openjdk-amd64/jre


    - name: Gather package facts
      package_facts:
        manager: apt


    - name: Install Python
      apt:
        name: "{{ 'python' if 'python' in ansible_facts.packages else 'python-is-python3' }}"
        state: present


    - name: Download get-pip.py
      get_url:
        url: https://bootstrap.pypa.io/pip/2.7/get-pip.py
        dest: /tmp/get-pip.py
      when: ansible_distribution_major_version|int == 16


    - name: Install pip for Python 2
      command: python2 /tmp/get-pip.py
      when: ansible_distribution_major_version|int == 16


    - name: Update Package Manager
      command: sudo apt update



    - name: Install python3-pip
      apt:
        name: python3-pip
        state: present


    - name: Upgrade pip for Python 3
      pip:
        name: pip
        state: latest
        executable: pip3
    - name: Install Selenium
      pip:
        name: selenium
        state: present

    - name: Ensure Docker service is running
      service:
        name: docker
        state: started



    - name: Install Portainer
      shell: |
        sudo docker rm -f portainer

        sudo docker run -d -p 8000:8000 -p 9443:9443 --name portainer --restart=always \
        -v /var/run/docker.sock:/var/run/docker.sock \
        -v portainer_data:/data \
        portainer/portainer-ce:2.9.3



    - name: Create ONOS directory
      file:
        path: "{{ user_home.stdout }}/onos"
        state: directory



    - name: Clone ONOS repository
      shell: git clone https://github.com/opennetworkinglab/onos "{{ user_home.stdout }}/onos"
      args:
        chdir: "{{ user_home.stdout }}/onos"




    - name: Checkout ONOS version
      shell: git checkout 2.5.0
      args:
        chdir: "{{ user_home.stdout }}/onos"




    - name: Set ONOS environment variables
      lineinfile:
        dest: ~/.bashrc
        line: |
          export ONOS_ROOT= "{{ user_home.stdout }}/onos"
          source "{{ user_home.stdout }}/onos/tools/dev/bash_profile"




    - name: Install Bazel
      shell: |
        wget https://github.com/bazelbuild/bazelisk/releases/download/v1.4.0/bazelisk-linux-amd64
        chmod +x bazelisk-linux-amd64
        sudo mv bazelisk-linux-amd64 "{{ user_home.stdout }}/onos/bazel"




    - name: Create directories
      file:
        path: "{{ item }}"
        state: directory
      with_items:
        - "{{ user_home.stdout }}/Downloads"
        - "{{ user_home.stdout }}/Applications"




    - name: Download Apache Karaf
      shell: |
        cd "{{ user_home.stdout }}/Downloads"
        wget http://archive.apache.org/dist/karaf/3.0.5/apache-karaf-3.0.5.tar.gz
        tar -zxvf apache-karaf-3.0.5.tar.gz -C "{{ user_home.stdout }}/Applications/"




    - name: Download Apache Maven
      shell: |
        cd "{{ user_home.stdout }}/Downloads"
        wget http://archive.apache.org/dist/maven/maven-3/3.3.9/binaries/apache-maven-3.3.9-bin.tar.gz
        tar -zxvf apache-maven-3.3.9-bin.tar.gz -C "{{ user_home.stdout }}/Applications/"





    - name: Build ONOS
      shell: |
         cd "{{ user_home.stdout }}/onos"
         bazel version
         bazel build onos
         cd "{{ user_home.stdout }}"





    - name: Install onos as a container
      shell: |
        sudo docker rm -f onos1

        sudo docker run -t -d -p 6633:6633 -p 6653:6653 -p 8181:8181 -p 8101:8101 -p 5005:5005 -p 830:830 \
        -e JAVA_DEBUG_PORT="0.0.0.0:5005" -e ONOS_APPS="drivers,openflow,lldpprovider,gui2,fwd" \
        --name onos1 onosproject/onos:2.5.0 debug



    - name: Extracting onos IP address from the inventory file
      set_fact:
        onos_ip: "{{ansible_host }}"

    - name: Debug - Save IP address of onos_machine
      debug:
        var: onos_ip


  
    - name: Check if IP address is obtained successfully
      fail:
        msg: "Failed to obtain IP address from inventory file."
      when: onos_ip == ""



    - name: login to onos CLI
      shell: sshpass -p 'karaf' ssh -p 8101 -o StrictHostKeyChecking=no karaf@{{ onos_ip }} &

